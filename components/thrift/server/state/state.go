// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package state

import (
	"bytes"
	"reflect"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

// Attributes:
//  - Tid
//  - UID
//  - Sid
//  - Cid
//  - Tag
type Client struct {
  Tid *string `thrift:"tid,1" db:"tid" json:"tid,omitempty"`
  UID *string `thrift:"uid,2" db:"uid" json:"uid,omitempty"`
  Sid *string `thrift:"sid,3" db:"sid" json:"sid,omitempty"`
  Cid *string `thrift:"cid,4" db:"cid" json:"cid,omitempty"`
  Tag *string `thrift:"tag,5" db:"tag" json:"tag,omitempty"`
}

func NewClient() *Client {
  return &Client{}
}

var Client_Tid_DEFAULT string
func (p *Client) GetTid() string {
  if !p.IsSetTid() {
    return Client_Tid_DEFAULT
  }
return *p.Tid
}
var Client_UID_DEFAULT string
func (p *Client) GetUID() string {
  if !p.IsSetUID() {
    return Client_UID_DEFAULT
  }
return *p.UID
}
var Client_Sid_DEFAULT string
func (p *Client) GetSid() string {
  if !p.IsSetSid() {
    return Client_Sid_DEFAULT
  }
return *p.Sid
}
var Client_Cid_DEFAULT string
func (p *Client) GetCid() string {
  if !p.IsSetCid() {
    return Client_Cid_DEFAULT
  }
return *p.Cid
}
var Client_Tag_DEFAULT string
func (p *Client) GetTag() string {
  if !p.IsSetTag() {
    return Client_Tag_DEFAULT
  }
return *p.Tag
}
func (p *Client) IsSetTid() bool {
  return p.Tid != nil
}

func (p *Client) IsSetUID() bool {
  return p.UID != nil
}

func (p *Client) IsSetSid() bool {
  return p.Sid != nil
}

func (p *Client) IsSetCid() bool {
  return p.Cid != nil
}

func (p *Client) IsSetTag() bool {
  return p.Tag != nil
}

func (p *Client) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Client)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Tid = &v
}
  return nil
}

func (p *Client)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UID = &v
}
  return nil
}

func (p *Client)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Sid = &v
}
  return nil
}

func (p *Client)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Cid = &v
}
  return nil
}

func (p *Client)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Tag = &v
}
  return nil
}

func (p *Client) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Client"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Client) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetTid() {
    if err := oprot.WriteFieldBegin("tid", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tid: ", p), err) }
    if err := oprot.WriteString(string(*p.Tid)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.tid (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tid: ", p), err) }
  }
  return err
}

func (p *Client) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetUID() {
    if err := oprot.WriteFieldBegin("uid", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:uid: ", p), err) }
    if err := oprot.WriteString(string(*p.UID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.uid (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:uid: ", p), err) }
  }
  return err
}

func (p *Client) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetSid() {
    if err := oprot.WriteFieldBegin("sid", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:sid: ", p), err) }
    if err := oprot.WriteString(string(*p.Sid)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.sid (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:sid: ", p), err) }
  }
  return err
}

func (p *Client) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetCid() {
    if err := oprot.WriteFieldBegin("cid", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:cid: ", p), err) }
    if err := oprot.WriteString(string(*p.Cid)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.cid (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:cid: ", p), err) }
  }
  return err
}

func (p *Client) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetTag() {
    if err := oprot.WriteFieldBegin("tag", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:tag: ", p), err) }
    if err := oprot.WriteString(string(*p.Tag)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.tag (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:tag: ", p), err) }
  }
  return err
}

func (p *Client) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Client(%+v)", *p)
}

type StateManager interface {
  // Parameters:
  //  - Client
  //  - Reason
  Disconnect(ctx context.Context, client *Client, reason string) (err error)
  // Parameters:
  //  - Client
  //  - Message
  Send(ctx context.Context, client *Client, message string) (err error)
  // Parameters:
  //  - Client
  GetClients(ctx context.Context, client *Client) (r []*Client, err error)
  // Parameters:
  //  - Client
  //  - Tag
  SetTag(ctx context.Context, client *Client, tag string) (err error)
  // Parameters:
  //  - Db
  StateCount(ctx context.Context, db string) (r int32, err error)
  // Parameters:
  //  - Db
  //  - Key
  //  - Val
  StateSet(ctx context.Context, db string, key string, val string) (err error)
  // Parameters:
  //  - Db
  //  - Key
  StateDel(ctx context.Context, db string, key string) (err error)
  // Parameters:
  //  - Db
  //  - Key
  StateGet(ctx context.Context, db string, key string) (r string, err error)
  // Parameters:
  //  - Db
  //  - Key
  StateGetByKey(ctx context.Context, db string, key string) (r []map[string]string, err error)
  // Parameters:
  //  - Db
  //  - Name
  //  - Pattern
  //  - Indextype
  StateCreateIndex(ctx context.Context, db string, name string, pattern string, indextype string) (err error)
  // Parameters:
  //  - Db
  //  - Name
  //  - Params
  StateGetByIndex(ctx context.Context, db string, name string, params map[string]string) (r []map[string]string, err error)
}

type StateManagerClient struct {
  c thrift.TClient
}

// Deprecated: Use NewStateManager instead
func NewStateManagerClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *StateManagerClient {
  return &StateManagerClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

// Deprecated: Use NewStateManager instead
func NewStateManagerClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *StateManagerClient {
  return &StateManagerClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewStateManagerClient(c thrift.TClient) *StateManagerClient {
  return &StateManagerClient{
    c: c,
  }
}

// Parameters:
//  - Client
//  - Reason
func (p *StateManagerClient) Disconnect(ctx context.Context, client *Client, reason string) (err error) {
  var _args0 StateManagerDisconnectArgs
  _args0.Client = client
  _args0.Reason = reason
  var _result1 StateManagerDisconnectResult
  if err = p.c.Call(ctx, "disconnect", &_args0, &_result1); err != nil {
    return
  }
  return nil
}

// Parameters:
//  - Client
//  - Message
func (p *StateManagerClient) Send(ctx context.Context, client *Client, message string) (err error) {
  var _args2 StateManagerSendArgs
  _args2.Client = client
  _args2.Message = message
  var _result3 StateManagerSendResult
  if err = p.c.Call(ctx, "send", &_args2, &_result3); err != nil {
    return
  }
  return nil
}

// Parameters:
//  - Client
func (p *StateManagerClient) GetClients(ctx context.Context, client *Client) (r []*Client, err error) {
  var _args4 StateManagerGetClientsArgs
  _args4.Client = client
  var _result5 StateManagerGetClientsResult
  if err = p.c.Call(ctx, "getClients", &_args4, &_result5); err != nil {
    return
  }
  return _result5.GetSuccess(), nil
}

// Parameters:
//  - Client
//  - Tag
func (p *StateManagerClient) SetTag(ctx context.Context, client *Client, tag string) (err error) {
  var _args6 StateManagerSetTagArgs
  _args6.Client = client
  _args6.Tag = tag
  var _result7 StateManagerSetTagResult
  if err = p.c.Call(ctx, "setTag", &_args6, &_result7); err != nil {
    return
  }
  return nil
}

// Parameters:
//  - Db
func (p *StateManagerClient) StateCount(ctx context.Context, db string) (r int32, err error) {
  var _args8 StateManagerStateCountArgs
  _args8.Db = db
  var _result9 StateManagerStateCountResult
  if err = p.c.Call(ctx, "stateCount", &_args8, &_result9); err != nil {
    return
  }
  return _result9.GetSuccess(), nil
}

// Parameters:
//  - Db
//  - Key
//  - Val
func (p *StateManagerClient) StateSet(ctx context.Context, db string, key string, val string) (err error) {
  var _args10 StateManagerStateSetArgs
  _args10.Db = db
  _args10.Key = key
  _args10.Val = val
  var _result11 StateManagerStateSetResult
  if err = p.c.Call(ctx, "stateSet", &_args10, &_result11); err != nil {
    return
  }
  return nil
}

// Parameters:
//  - Db
//  - Key
func (p *StateManagerClient) StateDel(ctx context.Context, db string, key string) (err error) {
  var _args12 StateManagerStateDelArgs
  _args12.Db = db
  _args12.Key = key
  var _result13 StateManagerStateDelResult
  if err = p.c.Call(ctx, "stateDel", &_args12, &_result13); err != nil {
    return
  }
  return nil
}

// Parameters:
//  - Db
//  - Key
func (p *StateManagerClient) StateGet(ctx context.Context, db string, key string) (r string, err error) {
  var _args14 StateManagerStateGetArgs
  _args14.Db = db
  _args14.Key = key
  var _result15 StateManagerStateGetResult
  if err = p.c.Call(ctx, "stateGet", &_args14, &_result15); err != nil {
    return
  }
  return _result15.GetSuccess(), nil
}

// Parameters:
//  - Db
//  - Key
func (p *StateManagerClient) StateGetByKey(ctx context.Context, db string, key string) (r []map[string]string, err error) {
  var _args16 StateManagerStateGetByKeyArgs
  _args16.Db = db
  _args16.Key = key
  var _result17 StateManagerStateGetByKeyResult
  if err = p.c.Call(ctx, "stateGetByKey", &_args16, &_result17); err != nil {
    return
  }
  return _result17.GetSuccess(), nil
}

// Parameters:
//  - Db
//  - Name
//  - Pattern
//  - Indextype
func (p *StateManagerClient) StateCreateIndex(ctx context.Context, db string, name string, pattern string, indextype string) (err error) {
  var _args18 StateManagerStateCreateIndexArgs
  _args18.Db = db
  _args18.Name = name
  _args18.Pattern = pattern
  _args18.Indextype = indextype
  var _result19 StateManagerStateCreateIndexResult
  if err = p.c.Call(ctx, "stateCreateIndex", &_args18, &_result19); err != nil {
    return
  }
  return nil
}

// Parameters:
//  - Db
//  - Name
//  - Params
func (p *StateManagerClient) StateGetByIndex(ctx context.Context, db string, name string, params map[string]string) (r []map[string]string, err error) {
  var _args20 StateManagerStateGetByIndexArgs
  _args20.Db = db
  _args20.Name = name
  _args20.Params = params
  var _result21 StateManagerStateGetByIndexResult
  if err = p.c.Call(ctx, "stateGetByIndex", &_args20, &_result21); err != nil {
    return
  }
  return _result21.GetSuccess(), nil
}

type StateManagerProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler StateManager
}

func (p *StateManagerProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *StateManagerProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *StateManagerProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewStateManagerProcessor(handler StateManager) *StateManagerProcessor {

  self22 := &StateManagerProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self22.processorMap["disconnect"] = &stateManagerProcessorDisconnect{handler:handler}
  self22.processorMap["send"] = &stateManagerProcessorSend{handler:handler}
  self22.processorMap["getClients"] = &stateManagerProcessorGetClients{handler:handler}
  self22.processorMap["setTag"] = &stateManagerProcessorSetTag{handler:handler}
  self22.processorMap["stateCount"] = &stateManagerProcessorStateCount{handler:handler}
  self22.processorMap["stateSet"] = &stateManagerProcessorStateSet{handler:handler}
  self22.processorMap["stateDel"] = &stateManagerProcessorStateDel{handler:handler}
  self22.processorMap["stateGet"] = &stateManagerProcessorStateGet{handler:handler}
  self22.processorMap["stateGetByKey"] = &stateManagerProcessorStateGetByKey{handler:handler}
  self22.processorMap["stateCreateIndex"] = &stateManagerProcessorStateCreateIndex{handler:handler}
  self22.processorMap["stateGetByIndex"] = &stateManagerProcessorStateGetByIndex{handler:handler}
return self22
}

func (p *StateManagerProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x23 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x23.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x23

}

type stateManagerProcessorDisconnect struct {
  handler StateManager
}

func (p *stateManagerProcessorDisconnect) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := StateManagerDisconnectArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("disconnect", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := StateManagerDisconnectResult{}
  var err2 error
  if err2 = p.handler.Disconnect(ctx, args.Client, args.Reason); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing disconnect: " + err2.Error())
    oprot.WriteMessageBegin("disconnect", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("disconnect", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type stateManagerProcessorSend struct {
  handler StateManager
}

func (p *stateManagerProcessorSend) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := StateManagerSendArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("send", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := StateManagerSendResult{}
  var err2 error
  if err2 = p.handler.Send(ctx, args.Client, args.Message); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing send: " + err2.Error())
    oprot.WriteMessageBegin("send", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("send", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type stateManagerProcessorGetClients struct {
  handler StateManager
}

func (p *stateManagerProcessorGetClients) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := StateManagerGetClientsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getClients", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := StateManagerGetClientsResult{}
var retval []*Client
  var err2 error
  if retval, err2 = p.handler.GetClients(ctx, args.Client); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getClients: " + err2.Error())
    oprot.WriteMessageBegin("getClients", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getClients", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type stateManagerProcessorSetTag struct {
  handler StateManager
}

func (p *stateManagerProcessorSetTag) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := StateManagerSetTagArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("setTag", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := StateManagerSetTagResult{}
  var err2 error
  if err2 = p.handler.SetTag(ctx, args.Client, args.Tag); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing setTag: " + err2.Error())
    oprot.WriteMessageBegin("setTag", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("setTag", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type stateManagerProcessorStateCount struct {
  handler StateManager
}

func (p *stateManagerProcessorStateCount) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := StateManagerStateCountArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("stateCount", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := StateManagerStateCountResult{}
var retval int32
  var err2 error
  if retval, err2 = p.handler.StateCount(ctx, args.Db); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing stateCount: " + err2.Error())
    oprot.WriteMessageBegin("stateCount", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("stateCount", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type stateManagerProcessorStateSet struct {
  handler StateManager
}

func (p *stateManagerProcessorStateSet) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := StateManagerStateSetArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("stateSet", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := StateManagerStateSetResult{}
  var err2 error
  if err2 = p.handler.StateSet(ctx, args.Db, args.Key, args.Val); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing stateSet: " + err2.Error())
    oprot.WriteMessageBegin("stateSet", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("stateSet", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type stateManagerProcessorStateDel struct {
  handler StateManager
}

func (p *stateManagerProcessorStateDel) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := StateManagerStateDelArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("stateDel", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := StateManagerStateDelResult{}
  var err2 error
  if err2 = p.handler.StateDel(ctx, args.Db, args.Key); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing stateDel: " + err2.Error())
    oprot.WriteMessageBegin("stateDel", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("stateDel", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type stateManagerProcessorStateGet struct {
  handler StateManager
}

func (p *stateManagerProcessorStateGet) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := StateManagerStateGetArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("stateGet", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := StateManagerStateGetResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.StateGet(ctx, args.Db, args.Key); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing stateGet: " + err2.Error())
    oprot.WriteMessageBegin("stateGet", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("stateGet", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type stateManagerProcessorStateGetByKey struct {
  handler StateManager
}

func (p *stateManagerProcessorStateGetByKey) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := StateManagerStateGetByKeyArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("stateGetByKey", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := StateManagerStateGetByKeyResult{}
var retval []map[string]string
  var err2 error
  if retval, err2 = p.handler.StateGetByKey(ctx, args.Db, args.Key); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing stateGetByKey: " + err2.Error())
    oprot.WriteMessageBegin("stateGetByKey", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("stateGetByKey", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type stateManagerProcessorStateCreateIndex struct {
  handler StateManager
}

func (p *stateManagerProcessorStateCreateIndex) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := StateManagerStateCreateIndexArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("stateCreateIndex", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := StateManagerStateCreateIndexResult{}
  var err2 error
  if err2 = p.handler.StateCreateIndex(ctx, args.Db, args.Name, args.Pattern, args.Indextype); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing stateCreateIndex: " + err2.Error())
    oprot.WriteMessageBegin("stateCreateIndex", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("stateCreateIndex", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type stateManagerProcessorStateGetByIndex struct {
  handler StateManager
}

func (p *stateManagerProcessorStateGetByIndex) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := StateManagerStateGetByIndexArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("stateGetByIndex", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := StateManagerStateGetByIndexResult{}
var retval []map[string]string
  var err2 error
  if retval, err2 = p.handler.StateGetByIndex(ctx, args.Db, args.Name, args.Params); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing stateGetByIndex: " + err2.Error())
    oprot.WriteMessageBegin("stateGetByIndex", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("stateGetByIndex", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Client
//  - Reason
type StateManagerDisconnectArgs struct {
  Client *Client `thrift:"client,1" db:"client" json:"client"`
  Reason string `thrift:"reason,2" db:"reason" json:"reason"`
}

func NewStateManagerDisconnectArgs() *StateManagerDisconnectArgs {
  return &StateManagerDisconnectArgs{}
}

var StateManagerDisconnectArgs_Client_DEFAULT *Client
func (p *StateManagerDisconnectArgs) GetClient() *Client {
  if !p.IsSetClient() {
    return StateManagerDisconnectArgs_Client_DEFAULT
  }
return p.Client
}

func (p *StateManagerDisconnectArgs) GetReason() string {
  return p.Reason
}
func (p *StateManagerDisconnectArgs) IsSetClient() bool {
  return p.Client != nil
}

func (p *StateManagerDisconnectArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StateManagerDisconnectArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Client = &Client{}
  if err := p.Client.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Client), err)
  }
  return nil
}

func (p *StateManagerDisconnectArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Reason = v
}
  return nil
}

func (p *StateManagerDisconnectArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("disconnect_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StateManagerDisconnectArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("client", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:client: ", p), err) }
  if err := p.Client.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Client), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:client: ", p), err) }
  return err
}

func (p *StateManagerDisconnectArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reason", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:reason: ", p), err) }
  if err := oprot.WriteString(string(p.Reason)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reason (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:reason: ", p), err) }
  return err
}

func (p *StateManagerDisconnectArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StateManagerDisconnectArgs(%+v)", *p)
}

type StateManagerDisconnectResult struct {
}

func NewStateManagerDisconnectResult() *StateManagerDisconnectResult {
  return &StateManagerDisconnectResult{}
}

func (p *StateManagerDisconnectResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StateManagerDisconnectResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("disconnect_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StateManagerDisconnectResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StateManagerDisconnectResult(%+v)", *p)
}

// Attributes:
//  - Client
//  - Message
type StateManagerSendArgs struct {
  Client *Client `thrift:"client,1" db:"client" json:"client"`
  Message string `thrift:"message,2" db:"message" json:"message"`
}

func NewStateManagerSendArgs() *StateManagerSendArgs {
  return &StateManagerSendArgs{}
}

var StateManagerSendArgs_Client_DEFAULT *Client
func (p *StateManagerSendArgs) GetClient() *Client {
  if !p.IsSetClient() {
    return StateManagerSendArgs_Client_DEFAULT
  }
return p.Client
}

func (p *StateManagerSendArgs) GetMessage() string {
  return p.Message
}
func (p *StateManagerSendArgs) IsSetClient() bool {
  return p.Client != nil
}

func (p *StateManagerSendArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StateManagerSendArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Client = &Client{}
  if err := p.Client.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Client), err)
  }
  return nil
}

func (p *StateManagerSendArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *StateManagerSendArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("send_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StateManagerSendArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("client", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:client: ", p), err) }
  if err := p.Client.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Client), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:client: ", p), err) }
  return err
}

func (p *StateManagerSendArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:message: ", p), err) }
  return err
}

func (p *StateManagerSendArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StateManagerSendArgs(%+v)", *p)
}

type StateManagerSendResult struct {
}

func NewStateManagerSendResult() *StateManagerSendResult {
  return &StateManagerSendResult{}
}

func (p *StateManagerSendResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StateManagerSendResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("send_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StateManagerSendResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StateManagerSendResult(%+v)", *p)
}

// Attributes:
//  - Client
type StateManagerGetClientsArgs struct {
  Client *Client `thrift:"client,1" db:"client" json:"client"`
}

func NewStateManagerGetClientsArgs() *StateManagerGetClientsArgs {
  return &StateManagerGetClientsArgs{}
}

var StateManagerGetClientsArgs_Client_DEFAULT *Client
func (p *StateManagerGetClientsArgs) GetClient() *Client {
  if !p.IsSetClient() {
    return StateManagerGetClientsArgs_Client_DEFAULT
  }
return p.Client
}
func (p *StateManagerGetClientsArgs) IsSetClient() bool {
  return p.Client != nil
}

func (p *StateManagerGetClientsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StateManagerGetClientsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Client = &Client{}
  if err := p.Client.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Client), err)
  }
  return nil
}

func (p *StateManagerGetClientsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getClients_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StateManagerGetClientsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("client", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:client: ", p), err) }
  if err := p.Client.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Client), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:client: ", p), err) }
  return err
}

func (p *StateManagerGetClientsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StateManagerGetClientsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type StateManagerGetClientsResult struct {
  Success []*Client `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewStateManagerGetClientsResult() *StateManagerGetClientsResult {
  return &StateManagerGetClientsResult{}
}

var StateManagerGetClientsResult_Success_DEFAULT []*Client

func (p *StateManagerGetClientsResult) GetSuccess() []*Client {
  return p.Success
}
func (p *StateManagerGetClientsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *StateManagerGetClientsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StateManagerGetClientsResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Client, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem24 := &Client{}
    if err := _elem24.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem24), err)
    }
    p.Success = append(p.Success, _elem24)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *StateManagerGetClientsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getClients_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StateManagerGetClientsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *StateManagerGetClientsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StateManagerGetClientsResult(%+v)", *p)
}

// Attributes:
//  - Client
//  - Tag
type StateManagerSetTagArgs struct {
  Client *Client `thrift:"client,1" db:"client" json:"client"`
  Tag string `thrift:"tag,2" db:"tag" json:"tag"`
}

func NewStateManagerSetTagArgs() *StateManagerSetTagArgs {
  return &StateManagerSetTagArgs{}
}

var StateManagerSetTagArgs_Client_DEFAULT *Client
func (p *StateManagerSetTagArgs) GetClient() *Client {
  if !p.IsSetClient() {
    return StateManagerSetTagArgs_Client_DEFAULT
  }
return p.Client
}

func (p *StateManagerSetTagArgs) GetTag() string {
  return p.Tag
}
func (p *StateManagerSetTagArgs) IsSetClient() bool {
  return p.Client != nil
}

func (p *StateManagerSetTagArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StateManagerSetTagArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Client = &Client{}
  if err := p.Client.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Client), err)
  }
  return nil
}

func (p *StateManagerSetTagArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Tag = v
}
  return nil
}

func (p *StateManagerSetTagArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("setTag_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StateManagerSetTagArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("client", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:client: ", p), err) }
  if err := p.Client.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Client), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:client: ", p), err) }
  return err
}

func (p *StateManagerSetTagArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tag", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tag: ", p), err) }
  if err := oprot.WriteString(string(p.Tag)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tag (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tag: ", p), err) }
  return err
}

func (p *StateManagerSetTagArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StateManagerSetTagArgs(%+v)", *p)
}

type StateManagerSetTagResult struct {
}

func NewStateManagerSetTagResult() *StateManagerSetTagResult {
  return &StateManagerSetTagResult{}
}

func (p *StateManagerSetTagResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StateManagerSetTagResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("setTag_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StateManagerSetTagResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StateManagerSetTagResult(%+v)", *p)
}

// Attributes:
//  - Db
type StateManagerStateCountArgs struct {
  Db string `thrift:"db,1" db:"db" json:"db"`
}

func NewStateManagerStateCountArgs() *StateManagerStateCountArgs {
  return &StateManagerStateCountArgs{}
}


func (p *StateManagerStateCountArgs) GetDb() string {
  return p.Db
}
func (p *StateManagerStateCountArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StateManagerStateCountArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Db = v
}
  return nil
}

func (p *StateManagerStateCountArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("stateCount_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StateManagerStateCountArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("db", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db: ", p), err) }
  if err := oprot.WriteString(string(p.Db)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db: ", p), err) }
  return err
}

func (p *StateManagerStateCountArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StateManagerStateCountArgs(%+v)", *p)
}

// Attributes:
//  - Success
type StateManagerStateCountResult struct {
  Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewStateManagerStateCountResult() *StateManagerStateCountResult {
  return &StateManagerStateCountResult{}
}

var StateManagerStateCountResult_Success_DEFAULT int32
func (p *StateManagerStateCountResult) GetSuccess() int32 {
  if !p.IsSetSuccess() {
    return StateManagerStateCountResult_Success_DEFAULT
  }
return *p.Success
}
func (p *StateManagerStateCountResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *StateManagerStateCountResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StateManagerStateCountResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *StateManagerStateCountResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("stateCount_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StateManagerStateCountResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *StateManagerStateCountResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StateManagerStateCountResult(%+v)", *p)
}

// Attributes:
//  - Db
//  - Key
//  - Val
type StateManagerStateSetArgs struct {
  Db string `thrift:"db,1" db:"db" json:"db"`
  Key string `thrift:"key,2" db:"key" json:"key"`
  Val string `thrift:"val,3" db:"val" json:"val"`
}

func NewStateManagerStateSetArgs() *StateManagerStateSetArgs {
  return &StateManagerStateSetArgs{}
}


func (p *StateManagerStateSetArgs) GetDb() string {
  return p.Db
}

func (p *StateManagerStateSetArgs) GetKey() string {
  return p.Key
}

func (p *StateManagerStateSetArgs) GetVal() string {
  return p.Val
}
func (p *StateManagerStateSetArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StateManagerStateSetArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Db = v
}
  return nil
}

func (p *StateManagerStateSetArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *StateManagerStateSetArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Val = v
}
  return nil
}

func (p *StateManagerStateSetArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("stateSet_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StateManagerStateSetArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("db", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db: ", p), err) }
  if err := oprot.WriteString(string(p.Db)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db: ", p), err) }
  return err
}

func (p *StateManagerStateSetArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:key: ", p), err) }
  if err := oprot.WriteString(string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:key: ", p), err) }
  return err
}

func (p *StateManagerStateSetArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("val", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:val: ", p), err) }
  if err := oprot.WriteString(string(p.Val)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.val (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:val: ", p), err) }
  return err
}

func (p *StateManagerStateSetArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StateManagerStateSetArgs(%+v)", *p)
}

type StateManagerStateSetResult struct {
}

func NewStateManagerStateSetResult() *StateManagerStateSetResult {
  return &StateManagerStateSetResult{}
}

func (p *StateManagerStateSetResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StateManagerStateSetResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("stateSet_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StateManagerStateSetResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StateManagerStateSetResult(%+v)", *p)
}

// Attributes:
//  - Db
//  - Key
type StateManagerStateDelArgs struct {
  Db string `thrift:"db,1" db:"db" json:"db"`
  Key string `thrift:"key,2" db:"key" json:"key"`
}

func NewStateManagerStateDelArgs() *StateManagerStateDelArgs {
  return &StateManagerStateDelArgs{}
}


func (p *StateManagerStateDelArgs) GetDb() string {
  return p.Db
}

func (p *StateManagerStateDelArgs) GetKey() string {
  return p.Key
}
func (p *StateManagerStateDelArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StateManagerStateDelArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Db = v
}
  return nil
}

func (p *StateManagerStateDelArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *StateManagerStateDelArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("stateDel_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StateManagerStateDelArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("db", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db: ", p), err) }
  if err := oprot.WriteString(string(p.Db)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db: ", p), err) }
  return err
}

func (p *StateManagerStateDelArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:key: ", p), err) }
  if err := oprot.WriteString(string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:key: ", p), err) }
  return err
}

func (p *StateManagerStateDelArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StateManagerStateDelArgs(%+v)", *p)
}

type StateManagerStateDelResult struct {
}

func NewStateManagerStateDelResult() *StateManagerStateDelResult {
  return &StateManagerStateDelResult{}
}

func (p *StateManagerStateDelResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StateManagerStateDelResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("stateDel_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StateManagerStateDelResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StateManagerStateDelResult(%+v)", *p)
}

// Attributes:
//  - Db
//  - Key
type StateManagerStateGetArgs struct {
  Db string `thrift:"db,1" db:"db" json:"db"`
  Key string `thrift:"key,2" db:"key" json:"key"`
}

func NewStateManagerStateGetArgs() *StateManagerStateGetArgs {
  return &StateManagerStateGetArgs{}
}


func (p *StateManagerStateGetArgs) GetDb() string {
  return p.Db
}

func (p *StateManagerStateGetArgs) GetKey() string {
  return p.Key
}
func (p *StateManagerStateGetArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StateManagerStateGetArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Db = v
}
  return nil
}

func (p *StateManagerStateGetArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *StateManagerStateGetArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("stateGet_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StateManagerStateGetArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("db", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db: ", p), err) }
  if err := oprot.WriteString(string(p.Db)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db: ", p), err) }
  return err
}

func (p *StateManagerStateGetArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:key: ", p), err) }
  if err := oprot.WriteString(string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:key: ", p), err) }
  return err
}

func (p *StateManagerStateGetArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StateManagerStateGetArgs(%+v)", *p)
}

// Attributes:
//  - Success
type StateManagerStateGetResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewStateManagerStateGetResult() *StateManagerStateGetResult {
  return &StateManagerStateGetResult{}
}

var StateManagerStateGetResult_Success_DEFAULT string
func (p *StateManagerStateGetResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return StateManagerStateGetResult_Success_DEFAULT
  }
return *p.Success
}
func (p *StateManagerStateGetResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *StateManagerStateGetResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StateManagerStateGetResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *StateManagerStateGetResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("stateGet_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StateManagerStateGetResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *StateManagerStateGetResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StateManagerStateGetResult(%+v)", *p)
}

// Attributes:
//  - Db
//  - Key
type StateManagerStateGetByKeyArgs struct {
  Db string `thrift:"db,1" db:"db" json:"db"`
  Key string `thrift:"key,2" db:"key" json:"key"`
}

func NewStateManagerStateGetByKeyArgs() *StateManagerStateGetByKeyArgs {
  return &StateManagerStateGetByKeyArgs{}
}


func (p *StateManagerStateGetByKeyArgs) GetDb() string {
  return p.Db
}

func (p *StateManagerStateGetByKeyArgs) GetKey() string {
  return p.Key
}
func (p *StateManagerStateGetByKeyArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StateManagerStateGetByKeyArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Db = v
}
  return nil
}

func (p *StateManagerStateGetByKeyArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *StateManagerStateGetByKeyArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("stateGetByKey_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StateManagerStateGetByKeyArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("db", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db: ", p), err) }
  if err := oprot.WriteString(string(p.Db)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db: ", p), err) }
  return err
}

func (p *StateManagerStateGetByKeyArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:key: ", p), err) }
  if err := oprot.WriteString(string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:key: ", p), err) }
  return err
}

func (p *StateManagerStateGetByKeyArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StateManagerStateGetByKeyArgs(%+v)", *p)
}

// Attributes:
//  - Success
type StateManagerStateGetByKeyResult struct {
  Success []map[string]string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewStateManagerStateGetByKeyResult() *StateManagerStateGetByKeyResult {
  return &StateManagerStateGetByKeyResult{}
}

var StateManagerStateGetByKeyResult_Success_DEFAULT []map[string]string

func (p *StateManagerStateGetByKeyResult) GetSuccess() []map[string]string {
  return p.Success
}
func (p *StateManagerStateGetByKeyResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *StateManagerStateGetByKeyResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StateManagerStateGetByKeyResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]map[string]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _, _, size, err := iprot.ReadMapBegin()
    if err != nil {
      return thrift.PrependError("error reading map begin: ", err)
    }
    tMap := make(map[string]string, size)
    _elem25 :=  tMap
    for i := 0; i < size; i ++ {
var _key26 string
      if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
} else {
      _key26 = v
}
var _val27 string
      if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
} else {
      _val27 = v
}
      _elem25[_key26] = _val27
    }
    if err := iprot.ReadMapEnd(); err != nil {
      return thrift.PrependError("error reading map end: ", err)
    }
    p.Success = append(p.Success, _elem25)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *StateManagerStateGetByKeyResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("stateGetByKey_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StateManagerStateGetByKeyResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.MAP, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(v)); err != nil {
        return thrift.PrependError("error writing map begin: ", err)
      }
      for k, v := range v {
        if err := oprot.WriteString(string(k)); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
        if err := oprot.WriteString(string(v)); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      }
      if err := oprot.WriteMapEnd(); err != nil {
        return thrift.PrependError("error writing map end: ", err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *StateManagerStateGetByKeyResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StateManagerStateGetByKeyResult(%+v)", *p)
}

// Attributes:
//  - Db
//  - Name
//  - Pattern
//  - Indextype
type StateManagerStateCreateIndexArgs struct {
  Db string `thrift:"db,1" db:"db" json:"db"`
  Name string `thrift:"name,2" db:"name" json:"name"`
  Pattern string `thrift:"pattern,3" db:"pattern" json:"pattern"`
  Indextype string `thrift:"indextype,4" db:"indextype" json:"indextype"`
}

func NewStateManagerStateCreateIndexArgs() *StateManagerStateCreateIndexArgs {
  return &StateManagerStateCreateIndexArgs{}
}


func (p *StateManagerStateCreateIndexArgs) GetDb() string {
  return p.Db
}

func (p *StateManagerStateCreateIndexArgs) GetName() string {
  return p.Name
}

func (p *StateManagerStateCreateIndexArgs) GetPattern() string {
  return p.Pattern
}

func (p *StateManagerStateCreateIndexArgs) GetIndextype() string {
  return p.Indextype
}
func (p *StateManagerStateCreateIndexArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StateManagerStateCreateIndexArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Db = v
}
  return nil
}

func (p *StateManagerStateCreateIndexArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *StateManagerStateCreateIndexArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Pattern = v
}
  return nil
}

func (p *StateManagerStateCreateIndexArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Indextype = v
}
  return nil
}

func (p *StateManagerStateCreateIndexArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("stateCreateIndex_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StateManagerStateCreateIndexArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("db", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db: ", p), err) }
  if err := oprot.WriteString(string(p.Db)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db: ", p), err) }
  return err
}

func (p *StateManagerStateCreateIndexArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err) }
  return err
}

func (p *StateManagerStateCreateIndexArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pattern", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:pattern: ", p), err) }
  if err := oprot.WriteString(string(p.Pattern)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pattern (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:pattern: ", p), err) }
  return err
}

func (p *StateManagerStateCreateIndexArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("indextype", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:indextype: ", p), err) }
  if err := oprot.WriteString(string(p.Indextype)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.indextype (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:indextype: ", p), err) }
  return err
}

func (p *StateManagerStateCreateIndexArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StateManagerStateCreateIndexArgs(%+v)", *p)
}

type StateManagerStateCreateIndexResult struct {
}

func NewStateManagerStateCreateIndexResult() *StateManagerStateCreateIndexResult {
  return &StateManagerStateCreateIndexResult{}
}

func (p *StateManagerStateCreateIndexResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StateManagerStateCreateIndexResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("stateCreateIndex_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StateManagerStateCreateIndexResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StateManagerStateCreateIndexResult(%+v)", *p)
}

// Attributes:
//  - Db
//  - Name
//  - Params
type StateManagerStateGetByIndexArgs struct {
  Db string `thrift:"db,1" db:"db" json:"db"`
  Name string `thrift:"name,2" db:"name" json:"name"`
  Params map[string]string `thrift:"params,3" db:"params" json:"params"`
}

func NewStateManagerStateGetByIndexArgs() *StateManagerStateGetByIndexArgs {
  return &StateManagerStateGetByIndexArgs{}
}


func (p *StateManagerStateGetByIndexArgs) GetDb() string {
  return p.Db
}

func (p *StateManagerStateGetByIndexArgs) GetName() string {
  return p.Name
}

func (p *StateManagerStateGetByIndexArgs) GetParams() map[string]string {
  return p.Params
}
func (p *StateManagerStateGetByIndexArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StateManagerStateGetByIndexArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Db = v
}
  return nil
}

func (p *StateManagerStateGetByIndexArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *StateManagerStateGetByIndexArgs)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Params =  tMap
  for i := 0; i < size; i ++ {
var _key28 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key28 = v
}
var _val29 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val29 = v
}
    p.Params[_key28] = _val29
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *StateManagerStateGetByIndexArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("stateGetByIndex_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StateManagerStateGetByIndexArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("db", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db: ", p), err) }
  if err := oprot.WriteString(string(p.Db)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db: ", p), err) }
  return err
}

func (p *StateManagerStateGetByIndexArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err) }
  return err
}

func (p *StateManagerStateGetByIndexArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("params", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:params: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Params)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Params {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:params: ", p), err) }
  return err
}

func (p *StateManagerStateGetByIndexArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StateManagerStateGetByIndexArgs(%+v)", *p)
}

// Attributes:
//  - Success
type StateManagerStateGetByIndexResult struct {
  Success []map[string]string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewStateManagerStateGetByIndexResult() *StateManagerStateGetByIndexResult {
  return &StateManagerStateGetByIndexResult{}
}

var StateManagerStateGetByIndexResult_Success_DEFAULT []map[string]string

func (p *StateManagerStateGetByIndexResult) GetSuccess() []map[string]string {
  return p.Success
}
func (p *StateManagerStateGetByIndexResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *StateManagerStateGetByIndexResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StateManagerStateGetByIndexResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]map[string]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _, _, size, err := iprot.ReadMapBegin()
    if err != nil {
      return thrift.PrependError("error reading map begin: ", err)
    }
    tMap := make(map[string]string, size)
    _elem30 :=  tMap
    for i := 0; i < size; i ++ {
var _key31 string
      if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
} else {
      _key31 = v
}
var _val32 string
      if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
} else {
      _val32 = v
}
      _elem30[_key31] = _val32
    }
    if err := iprot.ReadMapEnd(); err != nil {
      return thrift.PrependError("error reading map end: ", err)
    }
    p.Success = append(p.Success, _elem30)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *StateManagerStateGetByIndexResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("stateGetByIndex_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StateManagerStateGetByIndexResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.MAP, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(v)); err != nil {
        return thrift.PrependError("error writing map begin: ", err)
      }
      for k, v := range v {
        if err := oprot.WriteString(string(k)); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
        if err := oprot.WriteString(string(v)); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      }
      if err := oprot.WriteMapEnd(); err != nil {
        return thrift.PrependError("error writing map end: ", err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *StateManagerStateGetByIndexResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StateManagerStateGetByIndexResult(%+v)", *p)
}


